"""
V√≠ d·ª• n√¢ng cao v·ªÅ c√°c t√≠nh nƒÉng c·ªßa IQDB API Python

Bao g·ªìm:
- T√≠nh nƒÉng ignore colors v√† search more
- Ch·ªëng ban
- L·∫•y th√¥ng tin v·ªÅ tags v√† format ƒë∆∞·ª£c h·ªó tr·ª£

Ch·∫°y v·ªõi: python examples/advanced_features.py
"""
import asyncio
from pathlib import Path
import json

from iqdb_api import IqdbClient, SyncIqdbClient, Iqdb3dClient


async def discord_media_example():
    """V√≠ d·ª• x·ª≠ l√Ω Discord media links"""
    print("=== V√≠ d·ª• Discord Media Links ===")
    
    async with IqdbClient(prevent_bans=True) as client:
        discord_url = "https://cdn.discordapp.com/attachments/1384841768897351770/1384844445945434122/9478860_9478860_d9629b21708c830e3c6f4c27360331be.jpg?ex=6853e865&is=685296e5&hm=35b9befaca878d9d11436814e5c22b51dd1d10c833ed1e4f7f2b23359e8476f1&"
        
        try:
            print("T√¨m ki·∫øm Discord media URL...")
            print(f"URL: {discord_url}")

            result = await client.search_url(discord_url)
            
            print(f"\u2705 Th√†nh c√¥ng! T√¨m th·∫•y {len(result.matches)} k·∫øt qu·∫£")
            for i, match in enumerate(result.matches, 1):
                print(f"[{i}] {match.url}")
                print(f"    - Type: {match.match_type.value}")
                print(f"    - Similarity: {match.similarity}%")
                print(f"    - Source: {match.source.value if match.source else None}")
                print(f"    - Rating: {match.rating}")
                print(f"    - Score: {match.score}")
                print(f"    - Tags: {', '.join(match.tags) if match.tags else None}")
                print(f"    - Resolution: {match.resolution}")
                print(f"    - Preview: {match.preview_url}")
            with open("last_iqdb_results_advanced.json", "w", encoding="utf-8") as f:
                json.dump({
                    "searched_images_count": result.searched_images_count,
                    "searched_in_seconds": result.searched_in_seconds,
                    "matches": [match.__dict__ for match in result.matches],
                    "your_image": result.your_image.__dict__ if result.your_image else None
                }, f, ensure_ascii=False, indent=2)
            print("\n\uD83D\uDCBE ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o last_iqdb_results_advanced.json. B·∫°n c√≥ th·ªÉ load l·∫°i file n√†y ƒë·ªÉ ph√¢n t√≠ch ho·∫∑c s·ª≠ d·ª•ng ti·∫øp!")
            
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")


async def advanced_search_options():
    """V√≠ d·ª• c√°c t√πy ch·ªçn search n√¢ng cao"""
    print("\n=== V√≠ d·ª• Advanced Search Options ===")
    
    # S·ª≠ d·ª•ng ignore colors v√† search more
    async with IqdbClient(
        ignore_colors=True,      # B·ªè qua m√†u s·∫Øc
        search_more=True,        # T√¨m ki·∫øm nhi·ªÅu source h∆°n
        prevent_bans=True,       # Ch·ªëng ban
        rate_limit_seconds=6.0   # TƒÉng delay ƒë·ªÉ an to√†n h∆°n
    ) as client:
        
        # Hi·ªÉn th·ªã th√¥ng tin client
        info = client.get_search_info()
        print("üîß C·∫•u h√¨nh client:")
        print(f"  - Ignore colors: {info['ignore_colors']}")
        print(f"  - Search more: {info['search_more']}")
        print(f"  - Prevent bans: {info['prevent_bans']}")
        print(f"  - Rate limit: {info['rate_limit_seconds']}s")
        print(f"  - Session ID: {info['session_id']}")
        
        try:
            # Test v·ªõi m·ªôt URL ·∫£nh anime
            test_url = "https://safebooru.org//images/4405/c1c7a6f8d5a39c6e97b7935f0a2a2e9fae29c056.jpg"
            print(f"\nT√¨m ki·∫øm v·ªõi advanced options...")
            print(f"URL: {test_url}")
            
            result = await client.search_url(test_url)
            
            print(f"üìä K·∫øt qu·∫£:")
            print(f"  - ƒê√£ search {result.searched_images_count} ·∫£nh")
            print(f"  - Th·ªùi gian: {result.searched_in_seconds:.2f}s")
            print(f"  - T·ªïng matches: {len(result.matches)}")
            
            # Ph√¢n lo·∫°i k·∫øt qu·∫£
            print(f"  - Best matches: {len(result.best_matches)}")
            print(f"  - Additional matches: {len(result.additional_matches)}")
            print(f"  - Possible matches: {len(result.possible_matches)}")
            
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")


def get_supported_info():
    """L·∫•y th√¥ng tin v·ªÅ c√°c format v√† source ƒë∆∞·ª£c h·ªó tr·ª£"""
    print("\n=== Th√¥ng tin Format & Source ƒë∆∞·ª£c h·ªó tr·ª£ ===")
    
    # 2D IQDB
    with SyncIqdbClient() as client:
        info = client.get_search_info()
        
        print("üñºÔ∏è 2D IQDB (www.iqdb.org):")
        print(f"  üìÅ Supported formats: {', '.join(info['supported_formats'])}")
        print(f"  üìö Supported sources: {', '.join(info['supported_sources'])}")
        print(f"  üìè Max file size: {info['max_file_size']}")
    
    # 3D IQDB
    print("\nüé≠ 3D IQDB (3d.iqdb.org):")
    async def get_3d_info():
        async with Iqdb3dClient() as client:
            info = client.get_search_info()
            print(f"  üìÅ Supported formats: {', '.join(info['supported_formats'])}")
            print(f"  üìö Supported sources: {', '.join(info['supported_sources'])}")
            print(f"  üìè Max file size: {info['max_file_size']}")
    
    asyncio.run(get_3d_info())


async def force_download_example():
    """V√≠ d·ª• √©p bu·ªôc download ·∫£nh thay v√¨ search URL tr·ª±c ti·∫øp"""
    print("\n=== V√≠ d·ª• Force Download ===")
    
    async with IqdbClient() as client:
        # URL b√¨nh th∆∞·ªùng nh∆∞ng mu·ªën download ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c
        test_url = "https://safebooru.org//images/4405/c1c7a6f8d5a39c6e97b7935f0a2a2e9fae29c056.jpg"
        
        try:
            print("Search b·∫±ng URL tr·ª±c ti·∫øp:")
            result1 = await client.search_url(test_url, force_download=False)
            print(f"  - T√¨m th·∫•y {len(result1.matches)} k·∫øt qu·∫£")
            
            print("\nSearch b·∫±ng download r·ªìi upload:")
            result2 = await client.search_url(test_url, force_download=True)
            print(f"  - T√¨m th·∫•y {len(result2.matches)} k·∫øt qu·∫£")
            
            # So s√°nh k·∫øt qu·∫£
            if len(result2.matches) != len(result1.matches):
                print(f"üìà K·∫øt qu·∫£ kh√°c nhau! Download method: {len(result2.matches)} vs URL method: {len(result1.matches)}")
            else:
                print("üìä C·∫£ hai method cho k·∫øt qu·∫£ t∆∞∆°ng t·ª±")
                
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")


async def batch_search_with_prevention():
    """V√≠ d·ª• search nhi·ªÅu ·∫£nh v·ªõi ch·ªëng ban"""
    print("\n=== V√≠ d·ª• Batch Search v·ªõi Ban Prevention ===")
    
    urls = [
        "https://safebooru.org//images/4405/c1c7a6f8d5a39c6e97b7935f0a2a2e9fae29c056.jpg",
        "https://safebooru.org//images/4404/f8b3d1c4e7a2b9d6f5e8c3a7b2d9c6e4f7a8b5d2.png",
        # Th√™m Discord URL ƒë·ªÉ test
        "https://cdn.discordapp.com/attachments/1384841768897351770/1384844445945434122/9478860_9478860_d9629b21708c830e3c6f4c27360331be.jpg?ex=6853e865&is=685296e5&hm=35b9befaca878d9d11436814e5c22b51dd1d10c833ed1e4f7f2b23359e8476f1&"
    ]
    
    async with IqdbClient(
        prevent_bans=True,
        rate_limit_seconds=7.0  # TƒÉng delay cho batch search
    ) as client:
        
        print(f"üîç T√¨m ki·∫øm {len(urls)} ·∫£nh v·ªõi ban prevention...")
        
        results = []
        for i, url in enumerate(urls, 1):
            try:
                print(f"  [{i}/{len(urls)}] Searching: {url[:50]}...")
                result = await client.search_url(url)
                results.append(result)
                print(f"    ‚úÖ T√¨m th·∫•y {len(result.matches)} k·∫øt qu·∫£")
                
            except Exception as e:
                print(f"    ‚ùå L·ªói: {e}")
                results.append(None)
        
        # T·ªïng k·∫øt
        successful = sum(1 for r in results if r is not None)
        total_matches = sum(len(r.matches) for r in results if r is not None)
        
        print(f"\nüìä T·ªïng k·∫øt batch search:")
        print(f"  - Th√†nh c√¥ng: {successful}/{len(urls)}")
        print(f"  - T·ªïng matches: {total_matches}")


def main():
    """Ch·∫°y t·∫•t c·∫£ v√≠ d·ª• n√¢ng cao"""
    print("üöÄ IQDB API Python - Advanced Features Demo")
    print("=" * 50)
    
    # 1. Th√¥ng tin v·ªÅ format & source ƒë∆∞·ª£c h·ªó tr·ª£
    get_supported_info()
    
    # 2. Discord media links
    asyncio.run(discord_media_example())
    
    # 3. Advanced search options
    asyncio.run(advanced_search_options())
    
    # 4. Force download example
    asyncio.run(force_download_example())
    
    # 5. Batch search v·ªõi ban prevention
    asyncio.run(batch_search_with_prevention())
    
    print("\n‚úÖ Ho√†n th√†nh t·∫•t c·∫£ v√≠ d·ª• n√¢ng cao!")
    print("\nüí° Tips:")
    print("  - S·ª≠ d·ª•ng prevent_bans=True cho t√¨m ki·∫øm an to√†n")
    print("  - ignore_colors=True gi√∫p t√¨m ki·∫øm ch√≠nh x√°c h∆°n v·ªõi ·∫£nh ƒëen tr·∫Øng")
    print("  - search_more=True t√¨m ki·∫øm tr√™n nhi·ªÅu database h∆°n")


if __name__ == "__main__":
    main()
