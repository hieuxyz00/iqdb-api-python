"""
V√≠ d·ª• c∆° b·∫£n v·ªÅ c√°ch s·ª≠ d·ª•ng IQDB API Python

Ch·∫°y v·ªõi: python examples/basic_usage.py
"""
import asyncio
from pathlib import Path
import json
import sys

from iqdb_api import IqdbClient, SyncIqdbClient, UserCancelledException


async def async_example():
    """V√≠ d·ª• s·ª≠ d·ª•ng async client"""
    # S·ª≠ d·ª•ng client v·ªõi ban prevention
    async with IqdbClient(prevent_bans=True) as client:
        # T√¨m ki·∫øm b·∫±ng URL (c√≥ th·ªÉ g·∫∑p queue)
        print("T√¨m ki·∫øm b·∫±ng URL (c√≥ th·ªÉ g·∫∑p queue)...")
        image_url = "https://cdn.discordapp.com/attachments/1384841768897351770/1384844445945434122/9478860_9478860_d9629b21708c830e3c6f4c27360331be.jpg?ex=6853e865&is=685296e5&hm=35b9befaca878d9d11436814e5c22b51dd1d10c833ed1e4f7f2b23359e8476f1&"
        print(f"URL: {image_url[:80]}...")
        try:
            # TODO: S·ª≠ d·ª•ng stream ƒë·ªÉ hi·ªÉn th·ªã queue real-time
            async for result in client.search_url_stream(image_url):
                if result.queue_status:
                    msg = f"\r‚è≥ ƒêang trong h√†ng ƒë·ª£i IQDB... V·ªã tr√≠: {result.queue_status.queue_position} | ∆Ø·ªõc t√≠nh ch·ªù: {result.queue_status.estimated_wait}s "
                    print(msg, end="", flush=True)
                else:
                    print("\r", end="")
                    print(f"\u2705 Th√†nh c√¥ng! ƒê√£ t√¨m ki·∫øm {result.searched_images_count} h√¨nh ·∫£nh trong {result.searched_in_seconds:.2f} gi√¢y")
                    print(f"T√¨m th·∫•y {len(result.matches)} k·∫øt qu·∫£")
                    # In ra best match (n·∫øu c√≥)
                    if result.best_matches:
                        print("\n‚≠êÔ∏è Best match:")
                        for match in result.best_matches:
                            print(f"- URL: {match.url}")
                            print(f"  - Similarity: {match.similarity}% | Source: {match.source.value if match.source else None} | Rating: {match.rating} | Score: {match.score}")
                            print(f"  - Tags: {', '.join(match.tags) if match.tags else None}")
                            print(f"  - Resolution: {match.resolution} | Preview: {match.preview_url}")
                    # In ra c√°c match kh√°c
                    other_matches = [m for m in result.matches if not m.is_best_match]
                    if other_matches:
                        print("\nüîé Other matches:")
                        for i, match in enumerate(other_matches, 1):
                            print(f"[{i}] {match.url}")
                            print(f"    - Type: {match.match_type.value}")
                            print(f"    - Similarity: {match.similarity}%")
                            print(f"    - Source: {match.source.value if match.source else None}")
                            print(f"    - Rating: {match.rating}")
                            print(f"    - Score: {match.score}")
                            print(f"    - Tags: {', '.join(match.tags) if match.tags else None}")
                            print(f"    - Resolution: {match.resolution}")
                            print(f"    - Preview: {match.preview_url}")
                    break  # K·∫øt th√∫c khi ƒë√£ c√≥ k·∫øt qu·∫£ th·ª±c s·ª±
        except UserCancelledException as e:
            print(f"\n‚õî ƒê√£ h·ªßy thao t√°c: {e}")
            return  # D·ª´ng lu√¥n, kh√¥ng propagate exception
        except Exception as e:
            print(f"L·ªói: {e}")


def sync_example():
    """V√≠ d·ª• s·ª≠ d·ª•ng sync client"""
    # S·ª≠ d·ª•ng client v·ªõi ban prevention
    with SyncIqdbClient(prevent_bans=True) as client:
        # Hi·ªÉn th·ªã th√¥ng tin client
        info = client.get_search_info()
        print(f"üîß Client info: Session {info['session_id'][:8]}, Ban prevention: {info['prevent_bans']}")
        
        # T√¨m ki·∫øm b·∫±ng URL
        print("T√¨m ki·∫øm b·∫±ng URL...")
        try:
            image_url = "https://cdn.discordapp.com/attachments/1384841768897351770/1384844445945434122/9478860_9478860_d9629b21708c830e3c6f4c27360331be.jpg?ex=6853e865&is=685296e5&hm=35b9befaca878d9d11436814e5c22b51dd1d10c833ed1e4f7f2b23359e8476f1&"
            print(f"URL: {image_url[:80]}...")
            
            result = client.search_url(image_url)
            
            print(f"\u2705 Th√†nh c√¥ng!")
            print(f"ƒê√£ t√¨m ki·∫øm {result.searched_images_count} h√¨nh ·∫£nh trong {result.searched_in_seconds:.2f} gi√¢y")
            print(f"T√¨m th·∫•y {len(result.matches)} k·∫øt qu·∫£")
            # In ra best match (n·∫øu c√≥)
            if result.best_matches:
                print("\n‚≠êÔ∏è Best match:")
                for match in result.best_matches:
                    print(f"- URL: {match.url}")
                    print(f"  - Similarity: {match.similarity}% | Source: {match.source.value if match.source else None} | Rating: {match.rating} | Score: {match.score}")
                    print(f"  - Tags: {', '.join(match.tags) if match.tags else None}")
                    print(f"  - Resolution: {match.resolution} | Preview: {match.preview_url}")
            # In ra c√°c match kh√°c
            other_matches = [m for m in result.matches if not m.is_best_match]
            if other_matches:
                print("\nüîé Other matches:")
                for i, match in enumerate(other_matches, 1):
                    print(f"[{i}] {match.url}")
                    print(f"    - Type: {match.match_type.value}")
                    print(f"    - Similarity: {match.similarity}%")
                    print(f"    - Source: {match.source.value if match.source else None}")
                    print(f"    - Rating: {match.rating}")
                    print(f"    - Score: {match.score}")
                    print(f"    - Tags: {', '.join(match.tags) if match.tags else None}")
                    print(f"    - Resolution: {match.resolution}")
                    print(f"    - Preview: {match.preview_url}")
        except UserCancelledException as e:
            print(f"\n‚õî ƒê√£ h·ªßy thao t√°c: {e}")
        except Exception as e:
            print(f"L·ªói: {e}")


async def file_search_example():
    """V√≠ d·ª• t√¨m ki·∫øm b·∫±ng file"""
    print("\n=== V√≠ d·ª• T√¨m ki·∫øm b·∫±ng File ===")
    
    # T·∫°o m·ªôt file ·∫£nh m·∫´u (1x1 pixel PNG)
    sample_image_data = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\nIDATx\x9cc\x00\x01\x00\x00\x05\x00\x01\r\n-\xdb\x00\x00\x00\x00IEND\xaeB`\x82'
    
    async with IqdbClient() as client:
        try:
            print("T√¨m ki·∫øm b·∫±ng bytes data...")
            result = await client.search_file(sample_image_data)
            
            print(f"ƒê√£ t√¨m ki·∫øm {result.searched_images_count} h√¨nh ·∫£nh")
            print(f"T√¨m th·∫•y {len(result.matches)} k·∫øt qu·∫£")
            
            if result.your_image:
                print("Th√¥ng tin ·∫£nh c·ªßa b·∫°n:")
                if result.your_image.resolution:
                    print(f"  - ƒê·ªô ph√¢n gi·∫£i: {result.your_image.resolution}")
                if result.your_image.preview_url:
                    print(f"  - Preview URL: {result.your_image.preview_url}")
                    
        except Exception as e:
            print(f"L·ªói: {e}")


def main():
    """Ch·∫°y t·∫•t c·∫£ v√≠ d·ª•"""
    print("üîç IQDB API Python - V√≠ d·ª• c∆° b·∫£n")
    print("================================")
    
    try:
        # Ch·∫°y async example
        asyncio.run(async_example())
        
        # Ch·∫°y sync example
        sync_example()
        
        # Ch·∫°y file search example
        #asyncio.run(file_search_example())
        
    except (KeyboardInterrupt, UserCancelledException):
        print("\n‚õî ƒê√£ h·ªßy thao t√°c b·ªüi ng∆∞·ªùi d√πng (KeyboardInterrupt/UserCancelledException)")
    
    print("\n‚úÖ Ho√†n th√†nh t·∫•t c·∫£ v√≠ d·ª•!")


if __name__ == "__main__":
    main()
