"""
V√≠ d·ª• n√¢ng cao v·ªÅ c√°ch s·ª≠ d·ª•ng IQDB API Python

Bao g·ªìm:
- S·ª≠ d·ª•ng c·∫£ 2D v√† 3D IQDB
- X·ª≠ l√Ω l·ªói chi ti·∫øt
- Rate limiting customization
- Batch processing

Ch·∫°y v·ªõi: python examples/advanced_usage.py
"""
import asyncio
import time
from typing import List, Union
from pathlib import Path

from iqdb_api import IqdbClient, Iqdb3dClient, SearchResult
from iqdb_api.exceptions import (
    ImageTooLargeException,
    HttpRequestFailedException,
    NotImageException,
    IqdbApiException
)


class BatchIqdbSearcher:
    """Utility class ƒë·ªÉ th·ª±c hi·ªán batch search v·ªõi rate limiting"""
    
    def __init__(self, client: Union[IqdbClient, Iqdb3dClient]):
        self.client = client
    
    async def search_multiple_urls(self, urls: List[str]) -> List[SearchResult]:
        """T√¨m ki·∫øm nhi·ªÅu URL v·ªõi rate limiting"""
        results = []
        
        print(f"B·∫Øt ƒë·∫ßu t√¨m ki·∫øm {len(urls)} URLs...")
        
        for i, url in enumerate(urls, 1):
            print(f"[{i}/{len(urls)}] T√¨m ki·∫øm: {url}")
            
            try:
                start_time = time.time()
                result = await self.client.search_url(url)
                search_time = time.time() - start_time
                
                print(f"  ‚úÖ Ho√†n th√†nh trong {search_time:.2f}s - T√¨m th·∫•y {len(result.matches)} k·∫øt qu·∫£")
                for m in result.matches:
                    print(f"    - URL: {m.url}")
                results.append(result)
                
            except Exception as e:
                print(f"  ‚ùå L·ªói: {e}")
                # C√≥ th·ªÉ th√™m None ho·∫∑c error object v√†o results n·∫øu c·∫ßn
                
        return results


async def compare_2d_vs_3d():
    """So s√°nh k·∫øt qu·∫£ t√¨m ki·∫øm gi·ªØa 2D v√† 3D IQDB"""
    print("=== So s√°nh 2D vs 3D IQDB ===")
    
    # URL ·∫£nh test (thay ƒë·ªïi theo nhu c·∫ßu)
    test_url = "https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/PNG_transparency_demonstration_1.png/280px-PNG_transparency_demonstration_1.png"
    
    async with IqdbClient() as client_2d, Iqdb3dClient() as client_3d:
        try:
            print("T√¨m ki·∫øm tr√™n 2D IQDB...")
            result_2d = await client_2d.search_url(test_url)
            
            print("T√¨m ki·∫øm tr√™n 3D IQDB...")
            result_3d = await client_3d.search_url(test_url)
            
            print("\nüìä K·∫øt qu·∫£ so s√°nh:")
            print(f"2D IQDB: {len(result_2d.matches)} k·∫øt qu·∫£")
            print(f"3D IQDB: {len(result_3d.matches)} k·∫øt qu·∫£")
            
            # Analyze results
            if result_2d.is_found and not result_3d.is_found:
                print("üéØ 2D IQDB c√≥ k·∫øt qu·∫£ t·ªët h∆°n!")
            elif result_3d.is_found and not result_2d.is_found:
                print("üéØ 3D IQDB c√≥ k·∫øt qu·∫£ t·ªët h∆°n!")
            elif result_2d.is_found and result_3d.is_found:
                print("üéØ C·∫£ hai ƒë·ªÅu t√¨m th·∫•y k·∫øt qu·∫£!")
            else:
                print("‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ ch√≠nh x√°c t·ª´ c·∫£ hai")
                
        except Exception as e:
            print(f"L·ªói: {e}")


async def error_handling_demo():
    """Demo c√°c lo·∫°i l·ªói v√† c√°ch x·ª≠ l√Ω"""
    print("\n=== Demo X·ª≠ l√Ω L·ªói ===")
    
    async with IqdbClient() as client:
        # Test 1: URL kh√¥ng h·ª£p l·ªá
        print("Test 1: URL kh√¥ng h·ª£p l·ªá")
        try:
            await client.search_url("not-a-valid-url")
        except Exception as e:
            print(f"  ‚úÖ ƒê√£ b·∫Øt l·ªói: {type(e).__name__}: {e}")
        
        # Test 2: URL tr·ªëng
        print("Test 2: URL tr·ªëng")
        try:
            await client.search_url("")
        except ValueError as e:
            print(f"  ‚úÖ ƒê√£ b·∫Øt l·ªói: {type(e).__name__}: {e}")
        
        # Test 3: File qu√° l·ªõn (gi·∫£ l·∫≠p)
        print("Test 3: File qu√° l·ªõn")
        try:
            # T·∫°o data > 8MB
            large_data = b"x" * (8_388_609)  # > 8MB
            await client.search_file(large_data)
        except ImageTooLargeException as e:
            print(f"  ‚úÖ ƒê√£ b·∫Øt l·ªói: {type(e).__name__}: {e}")
        
        # Test 4: Data kh√¥ng ph·∫£i ·∫£nh
        print("Test 4: Data kh√¥ng ph·∫£i ·∫£nh")
        try:
            text_data = b"This is not an image file"
            await client.search_file(text_data)
        except Exception as e:
            print(f"  ‚úÖ ƒê√£ b·∫Øt l·ªói: {type(e).__name__}: {e}")


async def custom_rate_limiting():
    """Demo custom rate limiting"""
    print("\n=== Demo Custom Rate Limiting ===")
    
    # Client v·ªõi rate limit ng·∫Øn h∆°n cho demo
    async with IqdbClient(rate_limit_seconds=2.0) as client:
        urls = [
            "https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/PNG_transparency_demonstration_1.png/280px-PNG_transparency_demonstration_1.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/PNG_transparency_demonstration_1.png/280px-PNG_transparency_demonstration_1.png"
        ]
        
        searcher = BatchIqdbSearcher(client)
        
        start_time = time.time()
        results = await searcher.search_multiple_urls(urls)
        total_time = time.time() - start_time
        
        print(f"\nT·ªïng th·ªùi gian: {total_time:.2f}s cho {len(urls)} requests")
        print(f"Trung b√¨nh: {total_time/len(urls):.2f}s per request")


async def detailed_result_analysis():
    """Ph√¢n t√≠ch chi ti·∫øt k·∫øt qu·∫£ t√¨m ki·∫øm"""
    print("\n=== Ph√¢n t√≠ch Chi ti·∫øt K·∫øt qu·∫£ ===")
    
    async with IqdbClient() as client:
        try:
            # S·ª≠ d·ª•ng m·ªôt URL c√≥ kh·∫£ nƒÉng c√≥ k·∫øt qu·∫£
            test_url = "https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/PNG_transparency_demonstration_1.png/280px-PNG_transparency_demonstration_1.png"
            
            result = await client.search_url(test_url)
            
            print(f"üìà Th·ªëng k√™ t√¨m ki·∫øm:")
            print(f"  - S·ªë ·∫£nh ƒë√£ t√¨m: {result.searched_images_count:,}")
            print(f"  - Th·ªùi gian: {result.searched_in_seconds:.3f}s")
            print(f"  - T·ªïng k·∫øt qu·∫£: {len(result.matches)}")
            
            # Ph√¢n t√≠ch theo lo·∫°i match
            match_types = {}
            for match in result.matches:
                match_type = match.match_type.value
                if match_type not in match_types:
                    match_types[match_type] = []
                match_types[match_type].append(match)
            
            print(f"\nüìä Ph√¢n t√≠ch theo lo·∫°i:")
            for match_type, matches in match_types.items():
                print(f"  - {match_type.title()}: {len(matches)} k·∫øt qu·∫£")
                
                # Hi·ªÉn th·ªã similarity range
                similarities = [m.similarity for m in matches if m.similarity is not None]
                if similarities:
                    print(f"    ƒê·ªô t∆∞∆°ng t·ª±: {min(similarities):.1f}% - {max(similarities):.1f}%")
            
            # Ph√¢n t√≠ch theo ngu·ªìn
            sources = {}
            for match in result.matches:
                if match.source:
                    source = match.source.value
                    sources[source] = sources.get(source, 0) + 1
            
            if sources:
                print(f"\nüåê Ph√¢n t√≠ch theo ngu·ªìn:")
                for source, count in sorted(sources.items(), key=lambda x: x[1], reverse=True):
                    print(f"  - {source.title()}: {count} k·∫øt qu·∫£")
            
            # Your Image info
            if result.your_image:
                print(f"\nüñºÔ∏è Th√¥ng tin ·∫£nh c·ªßa b·∫°n:")
                if result.your_image.resolution:
                    print(f"  - ƒê·ªô ph√¢n gi·∫£i: {result.your_image.resolution}")
                if result.your_image.preview_url:
                    print(f"  - Preview: {result.your_image.preview_url}")
                if result.your_image.size:
                    print(f"  - K√≠ch th∆∞·ªõc: {result.your_image.size}")
                    
        except Exception as e:
            print(f"L·ªói: {e}")


async def main():
    """Ch·∫°y t·∫•t c·∫£ demo n√¢ng cao"""
    print("üî¨ IQDB API Python - V√≠ d·ª• n√¢ng cao")
    print("===================================")
    
    # Demo c√°c t√≠nh nƒÉng n√¢ng cao
    await compare_2d_vs_3d()
    await error_handling_demo()
    await custom_rate_limiting()
    await detailed_result_analysis()
    
    print("\n‚úÖ Ho√†n th√†nh t·∫•t c·∫£ demo n√¢ng cao!")


if __name__ == "__main__":
    asyncio.run(main())
